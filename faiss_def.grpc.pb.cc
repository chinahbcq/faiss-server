// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: faiss_def.proto

#include "faiss_def.pb.h"
#include "faiss_def.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace faiss_server {

static const char* FaissService_method_names[] = {
  "/faiss_server.FaissService/Ping",
  "/faiss_server.FaissService/DbNew",
  "/faiss_server.FaissService/DbDel",
  "/faiss_server.FaissService/DbList",
  "/faiss_server.FaissService/HSet",
  "/faiss_server.FaissService/HDel",
  "/faiss_server.FaissService/HGet",
  "/faiss_server.FaissService/HSearch",
};

std::unique_ptr< FaissService::Stub> FaissService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FaissService::Stub> stub(new FaissService::Stub(channel));
  return stub;
}

FaissService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(FaissService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DbNew_(FaissService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DbDel_(FaissService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DbList_(FaissService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HSet_(FaissService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HDel_(FaissService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HGet_(FaissService_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HSearch_(FaissService_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FaissService::Stub::Ping(::grpc::ClientContext* context, const ::faiss_server::PingRequest& request, ::faiss_server::PingResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::faiss_server::PingResponse>* FaissService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::faiss_server::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::faiss_server::PingResponse>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::Status FaissService::Stub::DbNew(::grpc::ClientContext* context, const ::faiss_server::DbNewRequest& request, ::faiss_server::EmptyResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DbNew_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::faiss_server::EmptyResponse>* FaissService::Stub::AsyncDbNewRaw(::grpc::ClientContext* context, const ::faiss_server::DbNewRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::faiss_server::EmptyResponse>(channel_.get(), cq, rpcmethod_DbNew_, context, request);
}

::grpc::Status FaissService::Stub::DbDel(::grpc::ClientContext* context, const ::faiss_server::DbDelRequest& request, ::faiss_server::EmptyResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DbDel_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::faiss_server::EmptyResponse>* FaissService::Stub::AsyncDbDelRaw(::grpc::ClientContext* context, const ::faiss_server::DbDelRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::faiss_server::EmptyResponse>(channel_.get(), cq, rpcmethod_DbDel_, context, request);
}

::grpc::Status FaissService::Stub::DbList(::grpc::ClientContext* context, const ::faiss_server::DbListRequest& request, ::faiss_server::DbListResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DbList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::faiss_server::DbListResponse>* FaissService::Stub::AsyncDbListRaw(::grpc::ClientContext* context, const ::faiss_server::DbListRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::faiss_server::DbListResponse>(channel_.get(), cq, rpcmethod_DbList_, context, request);
}

::grpc::Status FaissService::Stub::HSet(::grpc::ClientContext* context, const ::faiss_server::HSetRequest& request, ::faiss_server::HSetResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_HSet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::faiss_server::HSetResponse>* FaissService::Stub::AsyncHSetRaw(::grpc::ClientContext* context, const ::faiss_server::HSetRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::faiss_server::HSetResponse>(channel_.get(), cq, rpcmethod_HSet_, context, request);
}

::grpc::Status FaissService::Stub::HDel(::grpc::ClientContext* context, const ::faiss_server::HGetDelRequest& request, ::faiss_server::EmptyResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_HDel_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::faiss_server::EmptyResponse>* FaissService::Stub::AsyncHDelRaw(::grpc::ClientContext* context, const ::faiss_server::HGetDelRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::faiss_server::EmptyResponse>(channel_.get(), cq, rpcmethod_HDel_, context, request);
}

::grpc::Status FaissService::Stub::HGet(::grpc::ClientContext* context, const ::faiss_server::HGetDelRequest& request, ::faiss_server::HGetResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_HGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::faiss_server::HGetResponse>* FaissService::Stub::AsyncHGetRaw(::grpc::ClientContext* context, const ::faiss_server::HGetDelRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::faiss_server::HGetResponse>(channel_.get(), cq, rpcmethod_HGet_, context, request);
}

::grpc::Status FaissService::Stub::HSearch(::grpc::ClientContext* context, const ::faiss_server::HSearchRequest& request, ::faiss_server::HSearchResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_HSearch_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::faiss_server::HSearchResponse>* FaissService::Stub::AsyncHSearchRaw(::grpc::ClientContext* context, const ::faiss_server::HSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::faiss_server::HSearchResponse>(channel_.get(), cq, rpcmethod_HSearch_, context, request);
}

FaissService::Service::Service() {
  (void)FaissService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      FaissService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FaissService::Service, ::faiss_server::PingRequest, ::faiss_server::PingResponse>(
          std::mem_fn(&FaissService::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FaissService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FaissService::Service, ::faiss_server::DbNewRequest, ::faiss_server::EmptyResponse>(
          std::mem_fn(&FaissService::Service::DbNew), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FaissService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FaissService::Service, ::faiss_server::DbDelRequest, ::faiss_server::EmptyResponse>(
          std::mem_fn(&FaissService::Service::DbDel), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FaissService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FaissService::Service, ::faiss_server::DbListRequest, ::faiss_server::DbListResponse>(
          std::mem_fn(&FaissService::Service::DbList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FaissService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FaissService::Service, ::faiss_server::HSetRequest, ::faiss_server::HSetResponse>(
          std::mem_fn(&FaissService::Service::HSet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FaissService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FaissService::Service, ::faiss_server::HGetDelRequest, ::faiss_server::EmptyResponse>(
          std::mem_fn(&FaissService::Service::HDel), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FaissService_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FaissService::Service, ::faiss_server::HGetDelRequest, ::faiss_server::HGetResponse>(
          std::mem_fn(&FaissService::Service::HGet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FaissService_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FaissService::Service, ::faiss_server::HSearchRequest, ::faiss_server::HSearchResponse>(
          std::mem_fn(&FaissService::Service::HSearch), this)));
}

FaissService::Service::~Service() {
}

::grpc::Status FaissService::Service::Ping(::grpc::ServerContext* context, const ::faiss_server::PingRequest* request, ::faiss_server::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaissService::Service::DbNew(::grpc::ServerContext* context, const ::faiss_server::DbNewRequest* request, ::faiss_server::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaissService::Service::DbDel(::grpc::ServerContext* context, const ::faiss_server::DbDelRequest* request, ::faiss_server::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaissService::Service::DbList(::grpc::ServerContext* context, const ::faiss_server::DbListRequest* request, ::faiss_server::DbListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaissService::Service::HSet(::grpc::ServerContext* context, const ::faiss_server::HSetRequest* request, ::faiss_server::HSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaissService::Service::HDel(::grpc::ServerContext* context, const ::faiss_server::HGetDelRequest* request, ::faiss_server::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaissService::Service::HGet(::grpc::ServerContext* context, const ::faiss_server::HGetDelRequest* request, ::faiss_server::HGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaissService::Service::HSearch(::grpc::ServerContext* context, const ::faiss_server::HSearchRequest* request, ::faiss_server::HSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace faiss_server

